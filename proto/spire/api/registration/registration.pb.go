// Code generated by protoc-gen-go. DO NOT EDIT.
// source: registration.proto

package registration

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	common "github.com/spiffe/spire/proto/spire/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Mode controls the delete behavior if there are other records
// associated with the bundle (e.g. registration entries).
type DeleteFederatedBundleRequest_Mode int32

const (
	// RESTRICT prevents the bundle from being deleted in the presence of associated entries
	DeleteFederatedBundleRequest_RESTRICT DeleteFederatedBundleRequest_Mode = 0
	// DELETE deletes the bundle and associated entries
	DeleteFederatedBundleRequest_DELETE DeleteFederatedBundleRequest_Mode = 1
	// DISSOCIATE deletes the bundle and dissociates associated entries
	DeleteFederatedBundleRequest_DISSOCIATE DeleteFederatedBundleRequest_Mode = 2
)

var DeleteFederatedBundleRequest_Mode_name = map[int32]string{
	0: "RESTRICT",
	1: "DELETE",
	2: "DISSOCIATE",
}

var DeleteFederatedBundleRequest_Mode_value = map[string]int32{
	"RESTRICT":   0,
	"DELETE":     1,
	"DISSOCIATE": 2,
}

func (x DeleteFederatedBundleRequest_Mode) String() string {
	return proto.EnumName(DeleteFederatedBundleRequest_Mode_name, int32(x))
}

func (DeleteFederatedBundleRequest_Mode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_199f7aef77c18626, []int{10, 0}
}

// A type that represents the id of an entry.
type RegistrationEntryID struct {
	// RegistrationEntryID.
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegistrationEntryID) Reset()         { *m = RegistrationEntryID{} }
func (m *RegistrationEntryID) String() string { return proto.CompactTextString(m) }
func (*RegistrationEntryID) ProtoMessage()    {}
func (*RegistrationEntryID) Descriptor() ([]byte, []int) {
	return fileDescriptor_199f7aef77c18626, []int{0}
}

func (m *RegistrationEntryID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegistrationEntryID.Unmarshal(m, b)
}
func (m *RegistrationEntryID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegistrationEntryID.Marshal(b, m, deterministic)
}
func (m *RegistrationEntryID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistrationEntryID.Merge(m, src)
}
func (m *RegistrationEntryID) XXX_Size() int {
	return xxx_messageInfo_RegistrationEntryID.Size(m)
}
func (m *RegistrationEntryID) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistrationEntryID.DiscardUnknown(m)
}

var xxx_messageInfo_RegistrationEntryID proto.InternalMessageInfo

func (m *RegistrationEntryID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// A type that represents a parent Id.
type ParentID struct {
	// ParentId.
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParentID) Reset()         { *m = ParentID{} }
func (m *ParentID) String() string { return proto.CompactTextString(m) }
func (*ParentID) ProtoMessage()    {}
func (*ParentID) Descriptor() ([]byte, []int) {
	return fileDescriptor_199f7aef77c18626, []int{1}
}

func (m *ParentID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ParentID.Unmarshal(m, b)
}
func (m *ParentID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ParentID.Marshal(b, m, deterministic)
}
func (m *ParentID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParentID.Merge(m, src)
}
func (m *ParentID) XXX_Size() int {
	return xxx_messageInfo_ParentID.Size(m)
}
func (m *ParentID) XXX_DiscardUnknown() {
	xxx_messageInfo_ParentID.DiscardUnknown(m)
}

var xxx_messageInfo_ParentID proto.InternalMessageInfo

func (m *ParentID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// A type that represents a SPIFFE Id.
type SpiffeID struct {
	// SpiffeId.
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpiffeID) Reset()         { *m = SpiffeID{} }
func (m *SpiffeID) String() string { return proto.CompactTextString(m) }
func (*SpiffeID) ProtoMessage()    {}
func (*SpiffeID) Descriptor() ([]byte, []int) {
	return fileDescriptor_199f7aef77c18626, []int{2}
}

func (m *SpiffeID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpiffeID.Unmarshal(m, b)
}
func (m *SpiffeID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpiffeID.Marshal(b, m, deterministic)
}
func (m *SpiffeID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpiffeID.Merge(m, src)
}
func (m *SpiffeID) XXX_Size() int {
	return xxx_messageInfo_SpiffeID.Size(m)
}
func (m *SpiffeID) XXX_DiscardUnknown() {
	xxx_messageInfo_SpiffeID.DiscardUnknown(m)
}

var xxx_messageInfo_SpiffeID proto.InternalMessageInfo

func (m *SpiffeID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// A type that represents a CreateEntryIfNotExists response
// If an entry already exists, the existing entry will be returned
// and `existing` will be set to true.
type CreateEntryIfNotExistsResponse struct {
	Entry                *common.RegistrationEntry `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
	Preexisting          bool                      `protobuf:"varint,2,opt,name=preexisting,proto3" json:"preexisting,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *CreateEntryIfNotExistsResponse) Reset()         { *m = CreateEntryIfNotExistsResponse{} }
func (m *CreateEntryIfNotExistsResponse) String() string { return proto.CompactTextString(m) }
func (*CreateEntryIfNotExistsResponse) ProtoMessage()    {}
func (*CreateEntryIfNotExistsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_199f7aef77c18626, []int{3}
}

func (m *CreateEntryIfNotExistsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateEntryIfNotExistsResponse.Unmarshal(m, b)
}
func (m *CreateEntryIfNotExistsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateEntryIfNotExistsResponse.Marshal(b, m, deterministic)
}
func (m *CreateEntryIfNotExistsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateEntryIfNotExistsResponse.Merge(m, src)
}
func (m *CreateEntryIfNotExistsResponse) XXX_Size() int {
	return xxx_messageInfo_CreateEntryIfNotExistsResponse.Size(m)
}
func (m *CreateEntryIfNotExistsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateEntryIfNotExistsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateEntryIfNotExistsResponse proto.InternalMessageInfo

func (m *CreateEntryIfNotExistsResponse) GetEntry() *common.RegistrationEntry {
	if m != nil {
		return m.Entry
	}
	return nil
}

func (m *CreateEntryIfNotExistsResponse) GetPreexisting() bool {
	if m != nil {
		return m.Preexisting
	}
	return false
}

// A type used to update registration entries
type UpdateEntryRequest struct {
	// Registration entry to update
	Entry                *common.RegistrationEntry `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *UpdateEntryRequest) Reset()         { *m = UpdateEntryRequest{} }
func (m *UpdateEntryRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateEntryRequest) ProtoMessage()    {}
func (*UpdateEntryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_199f7aef77c18626, []int{4}
}

func (m *UpdateEntryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateEntryRequest.Unmarshal(m, b)
}
func (m *UpdateEntryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateEntryRequest.Marshal(b, m, deterministic)
}
func (m *UpdateEntryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateEntryRequest.Merge(m, src)
}
func (m *UpdateEntryRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateEntryRequest.Size(m)
}
func (m *UpdateEntryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateEntryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateEntryRequest proto.InternalMessageInfo

func (m *UpdateEntryRequest) GetEntry() *common.RegistrationEntry {
	if m != nil {
		return m.Entry
	}
	return nil
}

// A type that represents pagination for list responses
type Pagination struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	PageSize             int32    `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pagination) Reset()         { *m = Pagination{} }
func (m *Pagination) String() string { return proto.CompactTextString(m) }
func (*Pagination) ProtoMessage()    {}
func (*Pagination) Descriptor() ([]byte, []int) {
	return fileDescriptor_199f7aef77c18626, []int{5}
}

func (m *Pagination) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pagination.Unmarshal(m, b)
}
func (m *Pagination) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pagination.Marshal(b, m, deterministic)
}
func (m *Pagination) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pagination.Merge(m, src)
}
func (m *Pagination) XXX_Size() int {
	return xxx_messageInfo_Pagination.Size(m)
}
func (m *Pagination) XXX_DiscardUnknown() {
	xxx_messageInfo_Pagination.DiscardUnknown(m)
}

var xxx_messageInfo_Pagination proto.InternalMessageInfo

func (m *Pagination) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Pagination) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

//
type ListAllEntriesRequest struct {
	Pagination           *Pagination `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ListAllEntriesRequest) Reset()         { *m = ListAllEntriesRequest{} }
func (m *ListAllEntriesRequest) String() string { return proto.CompactTextString(m) }
func (*ListAllEntriesRequest) ProtoMessage()    {}
func (*ListAllEntriesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_199f7aef77c18626, []int{6}
}

func (m *ListAllEntriesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListAllEntriesRequest.Unmarshal(m, b)
}
func (m *ListAllEntriesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListAllEntriesRequest.Marshal(b, m, deterministic)
}
func (m *ListAllEntriesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAllEntriesRequest.Merge(m, src)
}
func (m *ListAllEntriesRequest) XXX_Size() int {
	return xxx_messageInfo_ListAllEntriesRequest.Size(m)
}
func (m *ListAllEntriesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAllEntriesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListAllEntriesRequest proto.InternalMessageInfo

func (m *ListAllEntriesRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// It is used to list all registration entries with pagination
type ListAllEntriesResponse struct {
	Entries              []*common.RegistrationEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	Pagination           *Pagination                 `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ListAllEntriesResponse) Reset()         { *m = ListAllEntriesResponse{} }
func (m *ListAllEntriesResponse) String() string { return proto.CompactTextString(m) }
func (*ListAllEntriesResponse) ProtoMessage()    {}
func (*ListAllEntriesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_199f7aef77c18626, []int{7}
}

func (m *ListAllEntriesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListAllEntriesResponse.Unmarshal(m, b)
}
func (m *ListAllEntriesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListAllEntriesResponse.Marshal(b, m, deterministic)
}
func (m *ListAllEntriesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAllEntriesResponse.Merge(m, src)
}
func (m *ListAllEntriesResponse) XXX_Size() int {
	return xxx_messageInfo_ListAllEntriesResponse.Size(m)
}
func (m *ListAllEntriesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAllEntriesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListAllEntriesResponse proto.InternalMessageInfo

func (m *ListAllEntriesResponse) GetEntries() []*common.RegistrationEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *ListAllEntriesResponse) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// A CA bundle for a different Trust Domain than the one used and managed by the Server.
type FederatedBundle struct {
	// Common bundle format
	Bundle               *common.Bundle `protobuf:"bytes,3,opt,name=bundle,proto3" json:"bundle,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *FederatedBundle) Reset()         { *m = FederatedBundle{} }
func (m *FederatedBundle) String() string { return proto.CompactTextString(m) }
func (*FederatedBundle) ProtoMessage()    {}
func (*FederatedBundle) Descriptor() ([]byte, []int) {
	return fileDescriptor_199f7aef77c18626, []int{8}
}

func (m *FederatedBundle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FederatedBundle.Unmarshal(m, b)
}
func (m *FederatedBundle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FederatedBundle.Marshal(b, m, deterministic)
}
func (m *FederatedBundle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FederatedBundle.Merge(m, src)
}
func (m *FederatedBundle) XXX_Size() int {
	return xxx_messageInfo_FederatedBundle.Size(m)
}
func (m *FederatedBundle) XXX_DiscardUnknown() {
	xxx_messageInfo_FederatedBundle.DiscardUnknown(m)
}

var xxx_messageInfo_FederatedBundle proto.InternalMessageInfo

func (m *FederatedBundle) GetBundle() *common.Bundle {
	if m != nil {
		return m.Bundle
	}
	return nil
}

// A type that represents a federated bundle id.
type FederatedBundleID struct {
	// SPIFFE ID of the federated bundle
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FederatedBundleID) Reset()         { *m = FederatedBundleID{} }
func (m *FederatedBundleID) String() string { return proto.CompactTextString(m) }
func (*FederatedBundleID) ProtoMessage()    {}
func (*FederatedBundleID) Descriptor() ([]byte, []int) {
	return fileDescriptor_199f7aef77c18626, []int{9}
}

func (m *FederatedBundleID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FederatedBundleID.Unmarshal(m, b)
}
func (m *FederatedBundleID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FederatedBundleID.Marshal(b, m, deterministic)
}
func (m *FederatedBundleID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FederatedBundleID.Merge(m, src)
}
func (m *FederatedBundleID) XXX_Size() int {
	return xxx_messageInfo_FederatedBundleID.Size(m)
}
func (m *FederatedBundleID) XXX_DiscardUnknown() {
	xxx_messageInfo_FederatedBundleID.DiscardUnknown(m)
}

var xxx_messageInfo_FederatedBundleID proto.InternalMessageInfo

func (m *FederatedBundleID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DeleteFederatedBundleRequest struct {
	Id                   string                            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Mode                 DeleteFederatedBundleRequest_Mode `protobuf:"varint,2,opt,name=mode,proto3,enum=spire.api.registration.DeleteFederatedBundleRequest_Mode" json:"mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *DeleteFederatedBundleRequest) Reset()         { *m = DeleteFederatedBundleRequest{} }
func (m *DeleteFederatedBundleRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteFederatedBundleRequest) ProtoMessage()    {}
func (*DeleteFederatedBundleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_199f7aef77c18626, []int{10}
}

func (m *DeleteFederatedBundleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteFederatedBundleRequest.Unmarshal(m, b)
}
func (m *DeleteFederatedBundleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteFederatedBundleRequest.Marshal(b, m, deterministic)
}
func (m *DeleteFederatedBundleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteFederatedBundleRequest.Merge(m, src)
}
func (m *DeleteFederatedBundleRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteFederatedBundleRequest.Size(m)
}
func (m *DeleteFederatedBundleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteFederatedBundleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteFederatedBundleRequest proto.InternalMessageInfo

func (m *DeleteFederatedBundleRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DeleteFederatedBundleRequest) GetMode() DeleteFederatedBundleRequest_Mode {
	if m != nil {
		return m.Mode
	}
	return DeleteFederatedBundleRequest_RESTRICT
}

// JoinToken message is used for registering a new token
type JoinToken struct {
	// The join token. If not set, one will be generated
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// TTL in seconds
	Ttl                  int32    `protobuf:"varint,2,opt,name=ttl,proto3" json:"ttl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JoinToken) Reset()         { *m = JoinToken{} }
func (m *JoinToken) String() string { return proto.CompactTextString(m) }
func (*JoinToken) ProtoMessage()    {}
func (*JoinToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_199f7aef77c18626, []int{11}
}

func (m *JoinToken) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JoinToken.Unmarshal(m, b)
}
func (m *JoinToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JoinToken.Marshal(b, m, deterministic)
}
func (m *JoinToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinToken.Merge(m, src)
}
func (m *JoinToken) XXX_Size() int {
	return xxx_messageInfo_JoinToken.Size(m)
}
func (m *JoinToken) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinToken.DiscardUnknown(m)
}

var xxx_messageInfo_JoinToken proto.InternalMessageInfo

func (m *JoinToken) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *JoinToken) GetTtl() int32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

// CA Bundle of the server
type Bundle struct {
	// Common bundle format
	Bundle               *common.Bundle `protobuf:"bytes,2,opt,name=bundle,proto3" json:"bundle,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Bundle) Reset()         { *m = Bundle{} }
func (m *Bundle) String() string { return proto.CompactTextString(m) }
func (*Bundle) ProtoMessage()    {}
func (*Bundle) Descriptor() ([]byte, []int) {
	return fileDescriptor_199f7aef77c18626, []int{12}
}

func (m *Bundle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Bundle.Unmarshal(m, b)
}
func (m *Bundle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Bundle.Marshal(b, m, deterministic)
}
func (m *Bundle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bundle.Merge(m, src)
}
func (m *Bundle) XXX_Size() int {
	return xxx_messageInfo_Bundle.Size(m)
}
func (m *Bundle) XXX_DiscardUnknown() {
	xxx_messageInfo_Bundle.DiscardUnknown(m)
}

var xxx_messageInfo_Bundle proto.InternalMessageInfo

func (m *Bundle) GetBundle() *common.Bundle {
	if m != nil {
		return m.Bundle
	}
	return nil
}

// Represents a ListAgents request
type ListAgentsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListAgentsRequest) Reset()         { *m = ListAgentsRequest{} }
func (m *ListAgentsRequest) String() string { return proto.CompactTextString(m) }
func (*ListAgentsRequest) ProtoMessage()    {}
func (*ListAgentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_199f7aef77c18626, []int{13}
}

func (m *ListAgentsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListAgentsRequest.Unmarshal(m, b)
}
func (m *ListAgentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListAgentsRequest.Marshal(b, m, deterministic)
}
func (m *ListAgentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAgentsRequest.Merge(m, src)
}
func (m *ListAgentsRequest) XXX_Size() int {
	return xxx_messageInfo_ListAgentsRequest.Size(m)
}
func (m *ListAgentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAgentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListAgentsRequest proto.InternalMessageInfo

// Represents a ListAgents response
type ListAgentsResponse struct {
	// List of all attested agents
	Nodes                []*common.AttestedNode `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ListAgentsResponse) Reset()         { *m = ListAgentsResponse{} }
func (m *ListAgentsResponse) String() string { return proto.CompactTextString(m) }
func (*ListAgentsResponse) ProtoMessage()    {}
func (*ListAgentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_199f7aef77c18626, []int{14}
}

func (m *ListAgentsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListAgentsResponse.Unmarshal(m, b)
}
func (m *ListAgentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListAgentsResponse.Marshal(b, m, deterministic)
}
func (m *ListAgentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAgentsResponse.Merge(m, src)
}
func (m *ListAgentsResponse) XXX_Size() int {
	return xxx_messageInfo_ListAgentsResponse.Size(m)
}
func (m *ListAgentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAgentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListAgentsResponse proto.InternalMessageInfo

func (m *ListAgentsResponse) GetNodes() []*common.AttestedNode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

// Represents an evict request
type EvictAgentRequest struct {
	// Agent identity of the node to be evicted.
	// For example: "spiffe://example.org/spire/agent/join_token/feea6adc-3254-4052-9a18-5eeb74bf214f"
	SpiffeID             string   `protobuf:"bytes,1,opt,name=spiffeID,proto3" json:"spiffeID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EvictAgentRequest) Reset()         { *m = EvictAgentRequest{} }
func (m *EvictAgentRequest) String() string { return proto.CompactTextString(m) }
func (*EvictAgentRequest) ProtoMessage()    {}
func (*EvictAgentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_199f7aef77c18626, []int{15}
}

func (m *EvictAgentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EvictAgentRequest.Unmarshal(m, b)
}
func (m *EvictAgentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EvictAgentRequest.Marshal(b, m, deterministic)
}
func (m *EvictAgentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvictAgentRequest.Merge(m, src)
}
func (m *EvictAgentRequest) XXX_Size() int {
	return xxx_messageInfo_EvictAgentRequest.Size(m)
}
func (m *EvictAgentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EvictAgentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EvictAgentRequest proto.InternalMessageInfo

func (m *EvictAgentRequest) GetSpiffeID() string {
	if m != nil {
		return m.SpiffeID
	}
	return ""
}

// Represents an evict response
type EvictAgentResponse struct {
	// Node contains the evicted node
	Node                 *common.AttestedNode `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *EvictAgentResponse) Reset()         { *m = EvictAgentResponse{} }
func (m *EvictAgentResponse) String() string { return proto.CompactTextString(m) }
func (*EvictAgentResponse) ProtoMessage()    {}
func (*EvictAgentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_199f7aef77c18626, []int{16}
}

func (m *EvictAgentResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EvictAgentResponse.Unmarshal(m, b)
}
func (m *EvictAgentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EvictAgentResponse.Marshal(b, m, deterministic)
}
func (m *EvictAgentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvictAgentResponse.Merge(m, src)
}
func (m *EvictAgentResponse) XXX_Size() int {
	return xxx_messageInfo_EvictAgentResponse.Size(m)
}
func (m *EvictAgentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EvictAgentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EvictAgentResponse proto.InternalMessageInfo

func (m *EvictAgentResponse) GetNode() *common.AttestedNode {
	if m != nil {
		return m.Node
	}
	return nil
}

type MintX509SVIDRequest struct {
	// SPIFFE ID of the X509-SVID
	SpiffeId string `protobuf:"bytes,1,opt,name=spiffe_id,json=spiffeId,proto3" json:"spiffe_id,omitempty"`
	// ASN.1 encoded CSR. The CSR is only used to convey the public key and
	// prove possession of the private key. The rest of the CSR is ignored.
	Csr []byte `protobuf:"bytes,2,opt,name=csr,proto3" json:"csr,omitempty"`
	// TTL of the X509-SVID, in seconds. The server default will be used if
	// unset. The TTL is advisory only. The actual lifetime of the X509-SVID
	// may be lower depending on the remaining lifetime of the active SPIRE
	// Server CA.
	Ttl int32 `protobuf:"varint,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
	// DNS names to include as DNS SANs in the X509-SVID. If set, the first
	// in the list is also set as the X509-SVID common name.
	DnsNames             []string `protobuf:"bytes,4,rep,name=dns_names,json=dnsNames,proto3" json:"dns_names,omitempty"`
	IPAddresses          []string `protobuf:"bytes,4,rep,name=ip_addresses,json=ipAddresses,proto3" json:"ip_addresses,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MintX509SVIDRequest) Reset()         { *m = MintX509SVIDRequest{} }
func (m *MintX509SVIDRequest) String() string { return proto.CompactTextString(m) }
func (*MintX509SVIDRequest) ProtoMessage()    {}
func (*MintX509SVIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_199f7aef77c18626, []int{17}
}

func (m *MintX509SVIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MintX509SVIDRequest.Unmarshal(m, b)
}
func (m *MintX509SVIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MintX509SVIDRequest.Marshal(b, m, deterministic)
}
func (m *MintX509SVIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MintX509SVIDRequest.Merge(m, src)
}
func (m *MintX509SVIDRequest) XXX_Size() int {
	return xxx_messageInfo_MintX509SVIDRequest.Size(m)
}
func (m *MintX509SVIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MintX509SVIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MintX509SVIDRequest proto.InternalMessageInfo

func (m *MintX509SVIDRequest) GetSpiffeId() string {
	if m != nil {
		return m.SpiffeId
	}
	return ""
}

func (m *MintX509SVIDRequest) GetCsr() []byte {
	if m != nil {
		return m.Csr
	}
	return nil
}

func (m *MintX509SVIDRequest) GetTtl() int32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func (m *MintX509SVIDRequest) GetDnsNames() []string {
	if m != nil {
		return m.DnsNames
	}
	return nil
}

func (m *MintX509SVIDRequest) GetIPAddresses() []string {
	if m != nil {
		return m.IPAddresses
	}
	return nil
}

type MintX509SVIDResponse struct {
	// X509-SVID chain. This includes the X509-SVID itself and any
	// intermediates necessary to chain back to certificates in the root_cas.
	SvidChain [][]byte `protobuf:"bytes,1,rep,name=svid_chain,json=svidChain,proto3" json:"svid_chain,omitempty"`
	// X.509 root certificates
	RootCas              [][]byte `protobuf:"bytes,2,rep,name=root_cas,json=rootCas,proto3" json:"root_cas,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MintX509SVIDResponse) Reset()         { *m = MintX509SVIDResponse{} }
func (m *MintX509SVIDResponse) String() string { return proto.CompactTextString(m) }
func (*MintX509SVIDResponse) ProtoMessage()    {}
func (*MintX509SVIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_199f7aef77c18626, []int{18}
}

func (m *MintX509SVIDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MintX509SVIDResponse.Unmarshal(m, b)
}
func (m *MintX509SVIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MintX509SVIDResponse.Marshal(b, m, deterministic)
}
func (m *MintX509SVIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MintX509SVIDResponse.Merge(m, src)
}
func (m *MintX509SVIDResponse) XXX_Size() int {
	return xxx_messageInfo_MintX509SVIDResponse.Size(m)
}
func (m *MintX509SVIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MintX509SVIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MintX509SVIDResponse proto.InternalMessageInfo

func (m *MintX509SVIDResponse) GetSvidChain() [][]byte {
	if m != nil {
		return m.SvidChain
	}
	return nil
}

func (m *MintX509SVIDResponse) GetRootCas() [][]byte {
	if m != nil {
		return m.RootCas
	}
	return nil
}

type MintJWTSVIDRequest struct {
	// SPIFFE ID of the JWT-SVID
	SpiffeId string `protobuf:"bytes,1,opt,name=spiffe_id,json=spiffeId,proto3" json:"spiffe_id,omitempty"`
	// TTL of the JWT-SVID, in seconds. The server default will be used if
	// unset. The TTL is advisory only. The actual lifetime of the JWT-SVID may
	// be lower depending on the remaining lifetime of the active SPIRE Server
	// CA.
	Ttl int32 `protobuf:"varint,2,opt,name=ttl,proto3" json:"ttl,omitempty"`
	// List of audience claims to include in the JWT-SVID. At least one must
	// be set.
	Audience             []string `protobuf:"bytes,3,rep,name=audience,proto3" json:"audience,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MintJWTSVIDRequest) Reset()         { *m = MintJWTSVIDRequest{} }
func (m *MintJWTSVIDRequest) String() string { return proto.CompactTextString(m) }
func (*MintJWTSVIDRequest) ProtoMessage()    {}
func (*MintJWTSVIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_199f7aef77c18626, []int{19}
}

func (m *MintJWTSVIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MintJWTSVIDRequest.Unmarshal(m, b)
}
func (m *MintJWTSVIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MintJWTSVIDRequest.Marshal(b, m, deterministic)
}
func (m *MintJWTSVIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MintJWTSVIDRequest.Merge(m, src)
}
func (m *MintJWTSVIDRequest) XXX_Size() int {
	return xxx_messageInfo_MintJWTSVIDRequest.Size(m)
}
func (m *MintJWTSVIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MintJWTSVIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MintJWTSVIDRequest proto.InternalMessageInfo

func (m *MintJWTSVIDRequest) GetSpiffeId() string {
	if m != nil {
		return m.SpiffeId
	}
	return ""
}

func (m *MintJWTSVIDRequest) GetTtl() int32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func (m *MintJWTSVIDRequest) GetAudience() []string {
	if m != nil {
		return m.Audience
	}
	return nil
}

type MintJWTSVIDResponse struct {
	// JWT-SVID token
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MintJWTSVIDResponse) Reset()         { *m = MintJWTSVIDResponse{} }
func (m *MintJWTSVIDResponse) String() string { return proto.CompactTextString(m) }
func (*MintJWTSVIDResponse) ProtoMessage()    {}
func (*MintJWTSVIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_199f7aef77c18626, []int{20}
}

func (m *MintJWTSVIDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MintJWTSVIDResponse.Unmarshal(m, b)
}
func (m *MintJWTSVIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MintJWTSVIDResponse.Marshal(b, m, deterministic)
}
func (m *MintJWTSVIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MintJWTSVIDResponse.Merge(m, src)
}
func (m *MintJWTSVIDResponse) XXX_Size() int {
	return xxx_messageInfo_MintJWTSVIDResponse.Size(m)
}
func (m *MintJWTSVIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MintJWTSVIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MintJWTSVIDResponse proto.InternalMessageInfo

func (m *MintJWTSVIDResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type NodeSelectors struct {
	// Node SPIFFE ID
	SpiffeId string `protobuf:"bytes,1,opt,name=spiffe_id,json=spiffeId,proto3" json:"spiffe_id,omitempty"`
	// Node selectors
	Selectors            []*common.Selector `protobuf:"bytes,2,rep,name=selectors,proto3" json:"selectors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *NodeSelectors) Reset()         { *m = NodeSelectors{} }
func (m *NodeSelectors) String() string { return proto.CompactTextString(m) }
func (*NodeSelectors) ProtoMessage()    {}
func (*NodeSelectors) Descriptor() ([]byte, []int) {
	return fileDescriptor_199f7aef77c18626, []int{21}
}

func (m *NodeSelectors) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeSelectors.Unmarshal(m, b)
}
func (m *NodeSelectors) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeSelectors.Marshal(b, m, deterministic)
}
func (m *NodeSelectors) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeSelectors.Merge(m, src)
}
func (m *NodeSelectors) XXX_Size() int {
	return xxx_messageInfo_NodeSelectors.Size(m)
}
func (m *NodeSelectors) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeSelectors.DiscardUnknown(m)
}

var xxx_messageInfo_NodeSelectors proto.InternalMessageInfo

func (m *NodeSelectors) GetSpiffeId() string {
	if m != nil {
		return m.SpiffeId
	}
	return ""
}

func (m *NodeSelectors) GetSelectors() []*common.Selector {
	if m != nil {
		return m.Selectors
	}
	return nil
}

// Represents a GetNodeSelectors request
type GetNodeSelectorsRequest struct {
	SpiffeId             string   `protobuf:"bytes,1,opt,name=spiffe_id,json=spiffeId,proto3" json:"spiffe_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetNodeSelectorsRequest) Reset()         { *m = GetNodeSelectorsRequest{} }
func (m *GetNodeSelectorsRequest) String() string { return proto.CompactTextString(m) }
func (*GetNodeSelectorsRequest) ProtoMessage()    {}
func (*GetNodeSelectorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_199f7aef77c18626, []int{22}
}

func (m *GetNodeSelectorsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNodeSelectorsRequest.Unmarshal(m, b)
}
func (m *GetNodeSelectorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNodeSelectorsRequest.Marshal(b, m, deterministic)
}
func (m *GetNodeSelectorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNodeSelectorsRequest.Merge(m, src)
}
func (m *GetNodeSelectorsRequest) XXX_Size() int {
	return xxx_messageInfo_GetNodeSelectorsRequest.Size(m)
}
func (m *GetNodeSelectorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNodeSelectorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNodeSelectorsRequest proto.InternalMessageInfo

func (m *GetNodeSelectorsRequest) GetSpiffeId() string {
	if m != nil {
		return m.SpiffeId
	}
	return ""
}

// Represents a GetNodeSelectors response
type GetNodeSelectorsResponse struct {
	Selectors            *NodeSelectors `protobuf:"bytes,1,opt,name=selectors,proto3" json:"selectors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetNodeSelectorsResponse) Reset()         { *m = GetNodeSelectorsResponse{} }
func (m *GetNodeSelectorsResponse) String() string { return proto.CompactTextString(m) }
func (*GetNodeSelectorsResponse) ProtoMessage()    {}
func (*GetNodeSelectorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_199f7aef77c18626, []int{23}
}

func (m *GetNodeSelectorsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNodeSelectorsResponse.Unmarshal(m, b)
}
func (m *GetNodeSelectorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNodeSelectorsResponse.Marshal(b, m, deterministic)
}
func (m *GetNodeSelectorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNodeSelectorsResponse.Merge(m, src)
}
func (m *GetNodeSelectorsResponse) XXX_Size() int {
	return xxx_messageInfo_GetNodeSelectorsResponse.Size(m)
}
func (m *GetNodeSelectorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNodeSelectorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetNodeSelectorsResponse proto.InternalMessageInfo

func (m *GetNodeSelectorsResponse) GetSelectors() *NodeSelectors {
	if m != nil {
		return m.Selectors
	}
	return nil
}

func init() {
	proto.RegisterEnum("spire.api.registration.DeleteFederatedBundleRequest_Mode", DeleteFederatedBundleRequest_Mode_name, DeleteFederatedBundleRequest_Mode_value)
	proto.RegisterType((*RegistrationEntryID)(nil), "spire.api.registration.RegistrationEntryID")
	proto.RegisterType((*ParentID)(nil), "spire.api.registration.ParentID")
	proto.RegisterType((*SpiffeID)(nil), "spire.api.registration.SpiffeID")
	proto.RegisterType((*CreateEntryIfNotExistsResponse)(nil), "spire.api.registration.CreateEntryIfNotExistsResponse")
	proto.RegisterType((*UpdateEntryRequest)(nil), "spire.api.registration.UpdateEntryRequest")
	proto.RegisterType((*Pagination)(nil), "spire.api.registration.Pagination")
	proto.RegisterType((*ListAllEntriesRequest)(nil), "spire.api.registration.ListAllEntriesRequest")
	proto.RegisterType((*ListAllEntriesResponse)(nil), "spire.api.registration.ListAllEntriesResponse")
	proto.RegisterType((*FederatedBundle)(nil), "spire.api.registration.FederatedBundle")
	proto.RegisterType((*FederatedBundleID)(nil), "spire.api.registration.FederatedBundleID")
	proto.RegisterType((*DeleteFederatedBundleRequest)(nil), "spire.api.registration.DeleteFederatedBundleRequest")
	proto.RegisterType((*JoinToken)(nil), "spire.api.registration.JoinToken")
	proto.RegisterType((*Bundle)(nil), "spire.api.registration.Bundle")
	proto.RegisterType((*ListAgentsRequest)(nil), "spire.api.registration.ListAgentsRequest")
	proto.RegisterType((*ListAgentsResponse)(nil), "spire.api.registration.ListAgentsResponse")
	proto.RegisterType((*EvictAgentRequest)(nil), "spire.api.registration.EvictAgentRequest")
	proto.RegisterType((*EvictAgentResponse)(nil), "spire.api.registration.EvictAgentResponse")
	proto.RegisterType((*MintX509SVIDRequest)(nil), "spire.api.registration.MintX509SVIDRequest")
	proto.RegisterType((*MintX509SVIDResponse)(nil), "spire.api.registration.MintX509SVIDResponse")
	proto.RegisterType((*MintJWTSVIDRequest)(nil), "spire.api.registration.MintJWTSVIDRequest")
	proto.RegisterType((*MintJWTSVIDResponse)(nil), "spire.api.registration.MintJWTSVIDResponse")
	proto.RegisterType((*NodeSelectors)(nil), "spire.api.registration.NodeSelectors")
	proto.RegisterType((*GetNodeSelectorsRequest)(nil), "spire.api.registration.GetNodeSelectorsRequest")
	proto.RegisterType((*GetNodeSelectorsResponse)(nil), "spire.api.registration.GetNodeSelectorsResponse")
}

func init() { proto.RegisterFile("registration.proto", fileDescriptor_199f7aef77c18626) }

var fileDescriptor_199f7aef77c18626 = []byte{
	// 1130 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0x6d, 0x53, 0x1b, 0x37,
	0x10, 0xae, 0xcd, 0x4b, 0xec, 0xb5, 0x4b, 0x40, 0xbc, 0x39, 0x97, 0x36, 0x75, 0xd4, 0xc9, 0x34,
	0x0d, 0xa9, 0xcd, 0x10, 0xc2, 0x0c, 0x9f, 0x32, 0x60, 0x9b, 0x8e, 0x93, 0x40, 0x99, 0xb3, 0x09,
	0x1d, 0xf8, 0xe0, 0x39, 0x7c, 0xc2, 0xa8, 0x35, 0x77, 0x97, 0x93, 0xc8, 0x84, 0xfc, 0x80, 0xfe,
	0x85, 0xfe, 0x8c, 0xfe, 0xc5, 0x8e, 0x4e, 0xba, 0xf3, 0xf9, 0x7c, 0xc2, 0x17, 0xa6, 0xfd, 0xe4,
	0x93, 0xb4, 0xfb, 0xec, 0xb3, 0xab, 0x95, 0xf4, 0x18, 0x90, 0x4f, 0x06, 0x94, 0x71, 0xdf, 0xe2,
	0xd4, 0x75, 0x6a, 0x9e, 0xef, 0x72, 0x17, 0xad, 0x31, 0x8f, 0xfa, 0xa4, 0x66, 0x79, 0xb4, 0x16,
	0x5f, 0x35, 0x1e, 0x05, 0xf3, 0xf5, 0xbe, 0x7b, 0x7d, 0xed, 0x3a, 0xea, 0x47, 0xba, 0xe0, 0x67,
	0xb0, 0x6c, 0xc6, 0x4c, 0x5b, 0x0e, 0xf7, 0x6f, 0xdb, 0x4d, 0xb4, 0x00, 0x79, 0x6a, 0x57, 0x72,
	0xd5, 0xdc, 0xf3, 0xa2, 0x99, 0xa7, 0x36, 0x36, 0xa0, 0x70, 0x6c, 0xf9, 0xc4, 0xe1, 0xe9, 0x6b,
	0x1d, 0x8f, 0x5e, 0x5e, 0x92, 0x94, 0xb5, 0x5b, 0x78, 0xd2, 0xf0, 0x89, 0xc5, 0x89, 0x04, 0xbe,
	0x3c, 0x72, 0x79, 0xeb, 0x33, 0x65, 0x9c, 0x99, 0x84, 0x79, 0xae, 0xc3, 0x08, 0x7a, 0x0d, 0x73,
	0x44, 0xac, 0x05, 0x4e, 0xa5, 0xad, 0x1f, 0x6a, 0x32, 0x07, 0x45, 0x72, 0x82, 0x9b, 0x29, 0xad,
	0x51, 0x15, 0x4a, 0x9e, 0x4f, 0x88, 0xc0, 0xa2, 0xce, 0xa0, 0x92, 0xaf, 0xe6, 0x9e, 0x17, 0xcc,
	0xf8, 0x14, 0x7e, 0x07, 0xe8, 0xc4, 0xb3, 0xc3, 0xd0, 0x26, 0xf9, 0x78, 0x43, 0x18, 0xbf, 0x67,
	0x38, 0xfc, 0x06, 0xe0, 0xd8, 0x1a, 0x50, 0x27, 0x58, 0x41, 0x2b, 0x30, 0xc7, 0xdd, 0x3f, 0x89,
	0xa3, 0x12, 0x95, 0x03, 0xf4, 0x18, 0x8a, 0x9e, 0x35, 0x20, 0x3d, 0x46, 0xbf, 0x90, 0x80, 0xd0,
	0x9c, 0x59, 0x10, 0x13, 0x1d, 0xfa, 0x85, 0xe0, 0x73, 0x58, 0x7d, 0x4f, 0x19, 0xdf, 0x1b, 0x0e,
	0x05, 0x2e, 0x25, 0x2c, 0x24, 0xb4, 0x0f, 0xe0, 0x45, 0xc8, 0x8a, 0x15, 0xae, 0xa5, 0x6f, 0x64,
	0x6d, 0xc4, 0xc1, 0x8c, 0x79, 0xe1, 0xbf, 0x73, 0xb0, 0x96, 0x44, 0x57, 0xe5, 0xdd, 0x85, 0x07,
	0x44, 0x4e, 0x55, 0x72, 0xd5, 0x99, 0x2c, 0x19, 0x87, 0xf6, 0x09, 0x66, 0xf9, 0x7b, 0x31, 0x7b,
	0x03, 0x0f, 0x0f, 0x88, 0x4d, 0x7c, 0x8b, 0x13, 0x7b, 0xff, 0xc6, 0xb1, 0x87, 0x04, 0xbd, 0x84,
	0xf9, 0x8b, 0xe0, 0xab, 0x32, 0x13, 0x40, 0xae, 0x8c, 0x13, 0x92, 0x56, 0xa6, 0xb2, 0xc1, 0x3f,
	0xc2, 0x52, 0x02, 0x20, 0xa5, 0xcb, 0xfe, 0xc9, 0xc1, 0x77, 0x4d, 0x32, 0x24, 0x9c, 0x24, 0x6c,
	0xc3, 0x22, 0x27, 0x1c, 0xd0, 0x21, 0xcc, 0x5e, 0xbb, 0xb6, 0xdc, 0xa5, 0x85, 0xad, 0x5d, 0x5d,
	0x52, 0x77, 0x61, 0xd6, 0x0e, 0x5d, 0x9b, 0x98, 0x01, 0x0c, 0xde, 0x84, 0x59, 0x31, 0x42, 0x65,
	0x28, 0x98, 0xad, 0x4e, 0xd7, 0x6c, 0x37, 0xba, 0x8b, 0xdf, 0x20, 0x80, 0xf9, 0x66, 0xeb, 0x7d,
	0xab, 0xdb, 0x5a, 0xcc, 0xa1, 0x05, 0x80, 0x66, 0xbb, 0xd3, 0xf9, 0xad, 0xd1, 0xde, 0xeb, 0xb6,
	0x16, 0xf3, 0xf8, 0x15, 0x14, 0xdf, 0xba, 0xd4, 0xe9, 0x06, 0x8d, 0x93, 0xde, 0x4e, 0x8b, 0x30,
	0xc3, 0xf9, 0x50, 0x35, 0x92, 0xf8, 0xc4, 0x3b, 0x30, 0x3f, 0x51, 0xc3, 0x7c, 0x86, 0x1a, 0x2e,
	0xc3, 0x52, 0xd0, 0x1d, 0x03, 0xe2, 0xf0, 0xb0, 0xef, 0xf0, 0x01, 0xa0, 0xf8, 0xa4, 0x6a, 0x97,
	0x4d, 0x98, 0x73, 0x5c, 0x3b, 0x6a, 0x16, 0x63, 0x1c, 0x77, 0x8f, 0x73, 0xc2, 0x38, 0xb1, 0x8f,
	0x44, 0xea, 0xd2, 0x10, 0xd7, 0x61, 0xa9, 0xf5, 0x89, 0xf6, 0x25, 0x50, 0x58, 0x6f, 0x03, 0x0a,
	0x4c, 0x5d, 0x09, 0x2a, 0xa9, 0x68, 0x8c, 0x9b, 0x80, 0xe2, 0x0e, 0x2a, 0x70, 0x0d, 0x66, 0x05,
	0x9e, 0x3a, 0x00, 0x77, 0xc5, 0x0d, 0xec, 0x30, 0x83, 0xe5, 0x43, 0xea, 0xf0, 0xdf, 0x5f, 0x6f,
	0xee, 0x76, 0x3e, 0xb4, 0x9b, 0x61, 0xe0, 0xc7, 0x50, 0x94, 0x81, 0x7a, 0xd1, 0x7e, 0x87, 0x91,
	0x6d, 0x51, 0xd1, 0x3e, 0xf3, 0x83, 0x92, 0x95, 0x4d, 0xf1, 0x19, 0xd6, 0x78, 0x26, 0xaa, 0xb1,
	0x00, 0xb0, 0x1d, 0xd6, 0x73, 0xac, 0x6b, 0xc2, 0x2a, 0xb3, 0xd5, 0x19, 0x01, 0x60, 0x3b, 0xec,
	0x48, 0x8c, 0xf1, 0x31, 0xac, 0x8c, 0x07, 0x55, 0xe4, 0xbf, 0x07, 0x60, 0x9f, 0xa8, 0xdd, 0xeb,
	0x5f, 0x59, 0xd4, 0x09, 0x4a, 0x57, 0x36, 0x8b, 0x62, 0xa6, 0x21, 0x26, 0xd0, 0x23, 0x28, 0xf8,
	0xae, 0xcb, 0x7b, 0x7d, 0x8b, 0x55, 0xf2, 0xc1, 0xe2, 0x03, 0x31, 0x6e, 0x58, 0x0c, 0xf7, 0x00,
	0x09, 0xc4, 0xb7, 0xa7, 0xdd, 0xaf, 0xc9, 0x62, 0xbc, 0x2f, 0x44, 0xb5, 0xad, 0x1b, 0x9b, 0x12,
	0xa7, 0x2f, 0xce, 0x54, 0x40, 0x39, 0x1c, 0xe3, 0x0d, 0x59, 0xa7, 0x28, 0x80, 0x62, 0x9c, 0xda,
	0x72, 0xf8, 0x02, 0xbe, 0x15, 0x25, 0xee, 0x90, 0x21, 0xe9, 0x73, 0xd7, 0x67, 0x77, 0x13, 0xd9,
	0x86, 0x22, 0x0b, 0x2d, 0x83, 0xbc, 0x4a, 0x5b, 0x6b, 0xe3, 0xfb, 0x16, 0x02, 0x99, 0x23, 0x43,
	0xbc, 0x03, 0xeb, 0xbf, 0x12, 0x3e, 0x16, 0x26, 0x4b, 0xda, 0xb8, 0x07, 0x95, 0x49, 0x3f, 0x95,
	0x4d, 0x23, 0xce, 0x44, 0x76, 0xd0, 0x33, 0xdd, 0x99, 0x1e, 0x47, 0x18, 0xf9, 0x6d, 0xfd, 0xb5,
	0x04, 0xe5, 0xf8, 0x6d, 0x88, 0xce, 0xa1, 0x14, 0x7b, 0xbb, 0xd0, 0xb4, 0x8b, 0xd3, 0xd8, 0xd0,
	0x85, 0x4c, 0x7b, 0x60, 0x3f, 0xc2, 0x5a, 0xfa, 0xc3, 0x38, 0x3d, 0xce, 0x8e, 0x2e, 0xce, 0x94,
	0x97, 0xf6, 0x1c, 0x4a, 0xf2, 0x42, 0x93, 0xf9, 0x7c, 0x0d, 0x5d, 0x63, 0x1a, 0x29, 0x74, 0x06,
	0x70, 0x40, 0x78, 0xff, 0xea, 0xff, 0xc0, 0x3e, 0x80, 0x72, 0x84, 0x2d, 0x1e, 0xa6, 0xe5, 0x71,
	0x87, 0xd6, 0xb5, 0xc7, 0x6f, 0x8d, 0xa7, 0x77, 0xa3, 0x08, 0xbf, 0x33, 0x28, 0xc5, 0x14, 0x01,
	0x7a, 0xa1, 0x23, 0x39, 0x29, 0x1b, 0xa6, 0x73, 0x3c, 0x81, 0x05, 0x71, 0x9d, 0xee, 0xdf, 0x46,
	0x32, 0xa9, 0xaa, 0x7f, 0x2a, 0xa5, 0x45, 0x16, 0xca, 0xef, 0x42, 0xd8, 0xb0, 0x65, 0x91, 0xe6,
	0x88, 0x65, 0x01, 0x3b, 0x84, 0x87, 0xe3, 0x60, 0x0c, 0xad, 0xa7, 0xa3, 0xb1, 0x2c, 0x70, 0x51,
	0xca, 0x91, 0xfa, 0xd3, 0xa6, 0x1c, 0x5a, 0x64, 0x81, 0xfd, 0x0c, 0xeb, 0xe3, 0x5a, 0xe6, 0x94,
	0xf2, 0xab, 0x63, 0x6b, 0x40, 0x18, 0xfa, 0x45, 0x87, 0x9f, 0x2a, 0xad, 0x8c, 0x5a, 0x56, 0x73,
	0x75, 0x40, 0x4e, 0x60, 0x55, 0x1e, 0xa1, 0xa4, 0x64, 0xf9, 0x49, 0x07, 0x94, 0x30, 0x34, 0xd2,
	0x3a, 0x13, 0xfd, 0x01, 0x2b, 0x41, 0xfb, 0x26, 0x51, 0x7f, 0xce, 0x88, 0xda, 0x6e, 0x1a, 0x59,
	0x09, 0xa0, 0x0f, 0xb0, 0x22, 0x92, 0x4b, 0x4c, 0x6b, 0x8e, 0x4c, 0x56, 0xd4, 0xcd, 0x9c, 0x28,
	0x8d, 0x3c, 0x15, 0xff, 0x6d, 0x69, 0x2e, 0x60, 0x35, 0x55, 0x63, 0xa1, 0xed, 0xfb, 0x48, 0xb2,
	0xf4, 0x18, 0xa7, 0xf0, 0x50, 0xee, 0xea, 0x48, 0x70, 0x3d, 0xd5, 0xa1, 0x47, 0x26, 0xc6, 0x74,
	0x13, 0xb4, 0x0f, 0xa5, 0x60, 0x5f, 0x15, 0xe5, 0xd4, 0x12, 0x3f, 0xd1, 0xc1, 0x28, 0xa7, 0x3e,
	0xc0, 0x48, 0x0c, 0xe9, 0x3b, 0x62, 0x42, 0x61, 0x19, 0x2f, 0xb2, 0x98, 0xaa, 0xbe, 0xee, 0x03,
	0x8c, 0xa4, 0x9e, 0x3e, 0xc8, 0x84, 0x46, 0xd4, 0x07, 0x49, 0x51, 0x8e, 0x14, 0xca, 0x71, 0x6d,
	0xa4, 0x7f, 0x02, 0x52, 0x64, 0x9b, 0xf1, 0x32, 0x9b, 0xb1, 0x0a, 0x75, 0x09, 0xa5, 0x98, 0xa6,
	0xd1, 0xdf, 0xe3, 0x93, 0xca, 0xca, 0xd8, 0xc8, 0x64, 0xab, 0xe2, 0xdc, 0xc0, 0x62, 0x52, 0x72,
	0xa0, 0xba, 0x0e, 0x40, 0x23, 0x6a, 0x8c, 0xcd, 0xec, 0x0e, 0x32, 0xec, 0xfe, 0xce, 0xd9, 0xf6,
	0x80, 0xf2, 0xab, 0x9b, 0x0b, 0xd1, 0x4a, 0x75, 0x29, 0x80, 0xea, 0xf2, 0x1f, 0x7c, 0xf0, 0x9f,
	0x5d, 0x7d, 0x5b, 0x1e, 0xad, 0xc7, 0x01, 0x2f, 0xe6, 0x83, 0xd5, 0x57, 0xff, 0x06, 0x00, 0x00,
	0xff, 0xff, 0x1c, 0xa6, 0x33, 0xe8, 0x1a, 0x10, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RegistrationClient is the client API for Registration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegistrationClient interface {
	// Creates an entry in the Registration table, used to assign SPIFFE IDs to nodes and workloads.
	CreateEntry(ctx context.Context, in *common.RegistrationEntry, opts ...grpc.CallOption) (*RegistrationEntryID, error)
	// Creates an entry in the Registration table if one like it doesn't already exist
	CreateEntryIfNotExists(ctx context.Context, in *common.RegistrationEntry, opts ...grpc.CallOption) (*CreateEntryIfNotExistsResponse, error)
	// Deletes an entry and returns the deleted entry.
	DeleteEntry(ctx context.Context, in *RegistrationEntryID, opts ...grpc.CallOption) (*common.RegistrationEntry, error)
	// Retrieve a specific registered entry.
	FetchEntry(ctx context.Context, in *RegistrationEntryID, opts ...grpc.CallOption) (*common.RegistrationEntry, error)
	// Retrieve all registered entries.
	FetchEntries(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*common.RegistrationEntries, error)
	// Updates a specific registered entry.
	UpdateEntry(ctx context.Context, in *UpdateEntryRequest, opts ...grpc.CallOption) (*common.RegistrationEntry, error)
	// Returns all the Entries associated with the ParentID value.
	ListByParentID(ctx context.Context, in *ParentID, opts ...grpc.CallOption) (*common.RegistrationEntries, error)
	// Returns all the entries associated with a selector value.
	ListBySelector(ctx context.Context, in *common.Selector, opts ...grpc.CallOption) (*common.RegistrationEntries, error)
	// Returns all the entries matching the set of selectors
	ListBySelectors(ctx context.Context, in *common.Selectors, opts ...grpc.CallOption) (*common.RegistrationEntries, error)
	// Return all registration entries for which SPIFFE ID matches.
	ListBySpiffeID(ctx context.Context, in *SpiffeID, opts ...grpc.CallOption) (*common.RegistrationEntries, error)
	// Return all registration entries with pagination of default page size of 50.
	ListAllEntriesWithPages(ctx context.Context, in *ListAllEntriesRequest, opts ...grpc.CallOption) (*ListAllEntriesResponse, error)
	// Creates an entry in the Federated bundle table to store the mappings of Federated SPIFFE IDs and their associated CA bundle.
	CreateFederatedBundle(ctx context.Context, in *FederatedBundle, opts ...grpc.CallOption) (*common.Empty, error)
	// Retrieves a single federated bundle
	FetchFederatedBundle(ctx context.Context, in *FederatedBundleID, opts ...grpc.CallOption) (*FederatedBundle, error)
	// Retrieves Federated bundles for all the Federated SPIFFE IDs.
	ListFederatedBundles(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (Registration_ListFederatedBundlesClient, error)
	// Updates a particular Federated Bundle. Useful for rotation.
	UpdateFederatedBundle(ctx context.Context, in *FederatedBundle, opts ...grpc.CallOption) (*common.Empty, error)
	// Delete a particular Federated Bundle. Used to destroy inter-domain trust.
	DeleteFederatedBundle(ctx context.Context, in *DeleteFederatedBundleRequest, opts ...grpc.CallOption) (*common.Empty, error)
	// Create a new join token
	CreateJoinToken(ctx context.Context, in *JoinToken, opts ...grpc.CallOption) (*JoinToken, error)
	// Retrieves the CA bundle.
	FetchBundle(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*Bundle, error)
	// EvictAgent removes an attestation entry from the attested nodes store
	EvictAgent(ctx context.Context, in *EvictAgentRequest, opts ...grpc.CallOption) (*EvictAgentResponse, error)
	// ListAgents will list all attested nodes
	ListAgents(ctx context.Context, in *ListAgentsRequest, opts ...grpc.CallOption) (*ListAgentsResponse, error)
	// MintX509SVID mints an X509-SVID directly with the SPIRE server CA.
	MintX509SVID(ctx context.Context, in *MintX509SVIDRequest, opts ...grpc.CallOption) (*MintX509SVIDResponse, error)
	// MintJWTSVID mints a JWT-SVID directly with the SPIRE server CA.
	MintJWTSVID(ctx context.Context, in *MintJWTSVIDRequest, opts ...grpc.CallOption) (*MintJWTSVIDResponse, error)
	// GetNodeSelectors gets node (agent) selectors
	GetNodeSelectors(ctx context.Context, in *GetNodeSelectorsRequest, opts ...grpc.CallOption) (*GetNodeSelectorsResponse, error)
}

type registrationClient struct {
	cc *grpc.ClientConn
}

func NewRegistrationClient(cc *grpc.ClientConn) RegistrationClient {
	return &registrationClient{cc}
}

func (c *registrationClient) CreateEntry(ctx context.Context, in *common.RegistrationEntry, opts ...grpc.CallOption) (*RegistrationEntryID, error) {
	out := new(RegistrationEntryID)
	err := c.cc.Invoke(ctx, "/spire.api.registration.Registration/CreateEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) CreateEntryIfNotExists(ctx context.Context, in *common.RegistrationEntry, opts ...grpc.CallOption) (*CreateEntryIfNotExistsResponse, error) {
	out := new(CreateEntryIfNotExistsResponse)
	err := c.cc.Invoke(ctx, "/spire.api.registration.Registration/CreateEntryIfNotExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) DeleteEntry(ctx context.Context, in *RegistrationEntryID, opts ...grpc.CallOption) (*common.RegistrationEntry, error) {
	out := new(common.RegistrationEntry)
	err := c.cc.Invoke(ctx, "/spire.api.registration.Registration/DeleteEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) FetchEntry(ctx context.Context, in *RegistrationEntryID, opts ...grpc.CallOption) (*common.RegistrationEntry, error) {
	out := new(common.RegistrationEntry)
	err := c.cc.Invoke(ctx, "/spire.api.registration.Registration/FetchEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) FetchEntries(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*common.RegistrationEntries, error) {
	out := new(common.RegistrationEntries)
	err := c.cc.Invoke(ctx, "/spire.api.registration.Registration/FetchEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) UpdateEntry(ctx context.Context, in *UpdateEntryRequest, opts ...grpc.CallOption) (*common.RegistrationEntry, error) {
	out := new(common.RegistrationEntry)
	err := c.cc.Invoke(ctx, "/spire.api.registration.Registration/UpdateEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) ListByParentID(ctx context.Context, in *ParentID, opts ...grpc.CallOption) (*common.RegistrationEntries, error) {
	out := new(common.RegistrationEntries)
	err := c.cc.Invoke(ctx, "/spire.api.registration.Registration/ListByParentID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) ListBySelector(ctx context.Context, in *common.Selector, opts ...grpc.CallOption) (*common.RegistrationEntries, error) {
	out := new(common.RegistrationEntries)
	err := c.cc.Invoke(ctx, "/spire.api.registration.Registration/ListBySelector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) ListBySelectors(ctx context.Context, in *common.Selectors, opts ...grpc.CallOption) (*common.RegistrationEntries, error) {
	out := new(common.RegistrationEntries)
	err := c.cc.Invoke(ctx, "/spire.api.registration.Registration/ListBySelectors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) ListBySpiffeID(ctx context.Context, in *SpiffeID, opts ...grpc.CallOption) (*common.RegistrationEntries, error) {
	out := new(common.RegistrationEntries)
	err := c.cc.Invoke(ctx, "/spire.api.registration.Registration/ListBySpiffeID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) ListAllEntriesWithPages(ctx context.Context, in *ListAllEntriesRequest, opts ...grpc.CallOption) (*ListAllEntriesResponse, error) {
	out := new(ListAllEntriesResponse)
	err := c.cc.Invoke(ctx, "/spire.api.registration.Registration/ListAllEntriesWithPages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) CreateFederatedBundle(ctx context.Context, in *FederatedBundle, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/spire.api.registration.Registration/CreateFederatedBundle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) FetchFederatedBundle(ctx context.Context, in *FederatedBundleID, opts ...grpc.CallOption) (*FederatedBundle, error) {
	out := new(FederatedBundle)
	err := c.cc.Invoke(ctx, "/spire.api.registration.Registration/FetchFederatedBundle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) ListFederatedBundles(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (Registration_ListFederatedBundlesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Registration_serviceDesc.Streams[0], "/spire.api.registration.Registration/ListFederatedBundles", opts...)
	if err != nil {
		return nil, err
	}
	x := &registrationListFederatedBundlesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Registration_ListFederatedBundlesClient interface {
	Recv() (*FederatedBundle, error)
	grpc.ClientStream
}

type registrationListFederatedBundlesClient struct {
	grpc.ClientStream
}

func (x *registrationListFederatedBundlesClient) Recv() (*FederatedBundle, error) {
	m := new(FederatedBundle)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *registrationClient) UpdateFederatedBundle(ctx context.Context, in *FederatedBundle, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/spire.api.registration.Registration/UpdateFederatedBundle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) DeleteFederatedBundle(ctx context.Context, in *DeleteFederatedBundleRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/spire.api.registration.Registration/DeleteFederatedBundle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) CreateJoinToken(ctx context.Context, in *JoinToken, opts ...grpc.CallOption) (*JoinToken, error) {
	out := new(JoinToken)
	err := c.cc.Invoke(ctx, "/spire.api.registration.Registration/CreateJoinToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) FetchBundle(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*Bundle, error) {
	out := new(Bundle)
	err := c.cc.Invoke(ctx, "/spire.api.registration.Registration/FetchBundle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) EvictAgent(ctx context.Context, in *EvictAgentRequest, opts ...grpc.CallOption) (*EvictAgentResponse, error) {
	out := new(EvictAgentResponse)
	err := c.cc.Invoke(ctx, "/spire.api.registration.Registration/EvictAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) ListAgents(ctx context.Context, in *ListAgentsRequest, opts ...grpc.CallOption) (*ListAgentsResponse, error) {
	out := new(ListAgentsResponse)
	err := c.cc.Invoke(ctx, "/spire.api.registration.Registration/ListAgents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) MintX509SVID(ctx context.Context, in *MintX509SVIDRequest, opts ...grpc.CallOption) (*MintX509SVIDResponse, error) {
	out := new(MintX509SVIDResponse)
	err := c.cc.Invoke(ctx, "/spire.api.registration.Registration/MintX509SVID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) MintJWTSVID(ctx context.Context, in *MintJWTSVIDRequest, opts ...grpc.CallOption) (*MintJWTSVIDResponse, error) {
	out := new(MintJWTSVIDResponse)
	err := c.cc.Invoke(ctx, "/spire.api.registration.Registration/MintJWTSVID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) GetNodeSelectors(ctx context.Context, in *GetNodeSelectorsRequest, opts ...grpc.CallOption) (*GetNodeSelectorsResponse, error) {
	out := new(GetNodeSelectorsResponse)
	err := c.cc.Invoke(ctx, "/spire.api.registration.Registration/GetNodeSelectors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistrationServer is the server API for Registration service.
type RegistrationServer interface {
	// Creates an entry in the Registration table, used to assign SPIFFE IDs to nodes and workloads.
	CreateEntry(context.Context, *common.RegistrationEntry) (*RegistrationEntryID, error)
	// Creates an entry in the Registration table if one like it doesn't already exist
	CreateEntryIfNotExists(context.Context, *common.RegistrationEntry) (*CreateEntryIfNotExistsResponse, error)
	// Deletes an entry and returns the deleted entry.
	DeleteEntry(context.Context, *RegistrationEntryID) (*common.RegistrationEntry, error)
	// Retrieve a specific registered entry.
	FetchEntry(context.Context, *RegistrationEntryID) (*common.RegistrationEntry, error)
	// Retrieve all registered entries.
	FetchEntries(context.Context, *common.Empty) (*common.RegistrationEntries, error)
	// Updates a specific registered entry.
	UpdateEntry(context.Context, *UpdateEntryRequest) (*common.RegistrationEntry, error)
	// Returns all the Entries associated with the ParentID value.
	ListByParentID(context.Context, *ParentID) (*common.RegistrationEntries, error)
	// Returns all the entries associated with a selector value.
	ListBySelector(context.Context, *common.Selector) (*common.RegistrationEntries, error)
	// Returns all the entries matching the set of selectors
	ListBySelectors(context.Context, *common.Selectors) (*common.RegistrationEntries, error)
	// Return all registration entries for which SPIFFE ID matches.
	ListBySpiffeID(context.Context, *SpiffeID) (*common.RegistrationEntries, error)
	// Return all registration entries with pagination of default page size of 50.
	ListAllEntriesWithPages(context.Context, *ListAllEntriesRequest) (*ListAllEntriesResponse, error)
	// Creates an entry in the Federated bundle table to store the mappings of Federated SPIFFE IDs and their associated CA bundle.
	CreateFederatedBundle(context.Context, *FederatedBundle) (*common.Empty, error)
	// Retrieves a single federated bundle
	FetchFederatedBundle(context.Context, *FederatedBundleID) (*FederatedBundle, error)
	// Retrieves Federated bundles for all the Federated SPIFFE IDs.
	ListFederatedBundles(*common.Empty, Registration_ListFederatedBundlesServer) error
	// Updates a particular Federated Bundle. Useful for rotation.
	UpdateFederatedBundle(context.Context, *FederatedBundle) (*common.Empty, error)
	// Delete a particular Federated Bundle. Used to destroy inter-domain trust.
	DeleteFederatedBundle(context.Context, *DeleteFederatedBundleRequest) (*common.Empty, error)
	// Create a new join token
	CreateJoinToken(context.Context, *JoinToken) (*JoinToken, error)
	// Retrieves the CA bundle.
	FetchBundle(context.Context, *common.Empty) (*Bundle, error)
	// EvictAgent removes an attestation entry from the attested nodes store
	EvictAgent(context.Context, *EvictAgentRequest) (*EvictAgentResponse, error)
	// ListAgents will list all attested nodes
	ListAgents(context.Context, *ListAgentsRequest) (*ListAgentsResponse, error)
	// MintX509SVID mints an X509-SVID directly with the SPIRE server CA.
	MintX509SVID(context.Context, *MintX509SVIDRequest) (*MintX509SVIDResponse, error)
	// MintJWTSVID mints a JWT-SVID directly with the SPIRE server CA.
	MintJWTSVID(context.Context, *MintJWTSVIDRequest) (*MintJWTSVIDResponse, error)
	// GetNodeSelectors gets node (agent) selectors
	GetNodeSelectors(context.Context, *GetNodeSelectorsRequest) (*GetNodeSelectorsResponse, error)
}

// UnimplementedRegistrationServer can be embedded to have forward compatible implementations.
type UnimplementedRegistrationServer struct {
}

func (*UnimplementedRegistrationServer) CreateEntry(ctx context.Context, req *common.RegistrationEntry) (*RegistrationEntryID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEntry not implemented")
}
func (*UnimplementedRegistrationServer) CreateEntryIfNotExists(ctx context.Context, req *common.RegistrationEntry) (*CreateEntryIfNotExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEntryIfNotExists not implemented")
}
func (*UnimplementedRegistrationServer) DeleteEntry(ctx context.Context, req *RegistrationEntryID) (*common.RegistrationEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntry not implemented")
}
func (*UnimplementedRegistrationServer) FetchEntry(ctx context.Context, req *RegistrationEntryID) (*common.RegistrationEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchEntry not implemented")
}
func (*UnimplementedRegistrationServer) FetchEntries(ctx context.Context, req *common.Empty) (*common.RegistrationEntries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchEntries not implemented")
}
func (*UnimplementedRegistrationServer) UpdateEntry(ctx context.Context, req *UpdateEntryRequest) (*common.RegistrationEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEntry not implemented")
}
func (*UnimplementedRegistrationServer) ListByParentID(ctx context.Context, req *ParentID) (*common.RegistrationEntries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByParentID not implemented")
}
func (*UnimplementedRegistrationServer) ListBySelector(ctx context.Context, req *common.Selector) (*common.RegistrationEntries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBySelector not implemented")
}
func (*UnimplementedRegistrationServer) ListBySelectors(ctx context.Context, req *common.Selectors) (*common.RegistrationEntries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBySelectors not implemented")
}
func (*UnimplementedRegistrationServer) ListBySpiffeID(ctx context.Context, req *SpiffeID) (*common.RegistrationEntries, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBySpiffeID not implemented")
}
func (*UnimplementedRegistrationServer) ListAllEntriesWithPages(ctx context.Context, req *ListAllEntriesRequest) (*ListAllEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllEntriesWithPages not implemented")
}
func (*UnimplementedRegistrationServer) CreateFederatedBundle(ctx context.Context, req *FederatedBundle) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFederatedBundle not implemented")
}
func (*UnimplementedRegistrationServer) FetchFederatedBundle(ctx context.Context, req *FederatedBundleID) (*FederatedBundle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchFederatedBundle not implemented")
}
func (*UnimplementedRegistrationServer) ListFederatedBundles(req *common.Empty, srv Registration_ListFederatedBundlesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListFederatedBundles not implemented")
}
func (*UnimplementedRegistrationServer) UpdateFederatedBundle(ctx context.Context, req *FederatedBundle) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFederatedBundle not implemented")
}
func (*UnimplementedRegistrationServer) DeleteFederatedBundle(ctx context.Context, req *DeleteFederatedBundleRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFederatedBundle not implemented")
}
func (*UnimplementedRegistrationServer) CreateJoinToken(ctx context.Context, req *JoinToken) (*JoinToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJoinToken not implemented")
}
func (*UnimplementedRegistrationServer) FetchBundle(ctx context.Context, req *common.Empty) (*Bundle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchBundle not implemented")
}
func (*UnimplementedRegistrationServer) EvictAgent(ctx context.Context, req *EvictAgentRequest) (*EvictAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvictAgent not implemented")
}
func (*UnimplementedRegistrationServer) ListAgents(ctx context.Context, req *ListAgentsRequest) (*ListAgentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgents not implemented")
}
func (*UnimplementedRegistrationServer) MintX509SVID(ctx context.Context, req *MintX509SVIDRequest) (*MintX509SVIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintX509SVID not implemented")
}
func (*UnimplementedRegistrationServer) MintJWTSVID(ctx context.Context, req *MintJWTSVIDRequest) (*MintJWTSVIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintJWTSVID not implemented")
}
func (*UnimplementedRegistrationServer) GetNodeSelectors(ctx context.Context, req *GetNodeSelectorsRequest) (*GetNodeSelectorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeSelectors not implemented")
}

func RegisterRegistrationServer(s *grpc.Server, srv RegistrationServer) {
	s.RegisterService(&_Registration_serviceDesc, srv)
}

func _Registration_CreateEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RegistrationEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).CreateEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/CreateEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).CreateEntry(ctx, req.(*common.RegistrationEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_CreateEntryIfNotExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RegistrationEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).CreateEntryIfNotExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/CreateEntryIfNotExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).CreateEntryIfNotExists(ctx, req.(*common.RegistrationEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_DeleteEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationEntryID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).DeleteEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/DeleteEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).DeleteEntry(ctx, req.(*RegistrationEntryID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_FetchEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationEntryID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).FetchEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/FetchEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).FetchEntry(ctx, req.(*RegistrationEntryID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_FetchEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).FetchEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/FetchEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).FetchEntries(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_UpdateEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).UpdateEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/UpdateEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).UpdateEntry(ctx, req.(*UpdateEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_ListByParentID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParentID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).ListByParentID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/ListByParentID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).ListByParentID(ctx, req.(*ParentID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_ListBySelector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Selector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).ListBySelector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/ListBySelector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).ListBySelector(ctx, req.(*common.Selector))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_ListBySelectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Selectors)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).ListBySelectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/ListBySelectors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).ListBySelectors(ctx, req.(*common.Selectors))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_ListBySpiffeID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpiffeID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).ListBySpiffeID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/ListBySpiffeID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).ListBySpiffeID(ctx, req.(*SpiffeID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_ListAllEntriesWithPages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).ListAllEntriesWithPages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/ListAllEntriesWithPages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).ListAllEntriesWithPages(ctx, req.(*ListAllEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_CreateFederatedBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FederatedBundle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).CreateFederatedBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/CreateFederatedBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).CreateFederatedBundle(ctx, req.(*FederatedBundle))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_FetchFederatedBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FederatedBundleID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).FetchFederatedBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/FetchFederatedBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).FetchFederatedBundle(ctx, req.(*FederatedBundleID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_ListFederatedBundles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(common.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RegistrationServer).ListFederatedBundles(m, &registrationListFederatedBundlesServer{stream})
}

type Registration_ListFederatedBundlesServer interface {
	Send(*FederatedBundle) error
	grpc.ServerStream
}

type registrationListFederatedBundlesServer struct {
	grpc.ServerStream
}

func (x *registrationListFederatedBundlesServer) Send(m *FederatedBundle) error {
	return x.ServerStream.SendMsg(m)
}

func _Registration_UpdateFederatedBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FederatedBundle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).UpdateFederatedBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/UpdateFederatedBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).UpdateFederatedBundle(ctx, req.(*FederatedBundle))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_DeleteFederatedBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFederatedBundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).DeleteFederatedBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/DeleteFederatedBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).DeleteFederatedBundle(ctx, req.(*DeleteFederatedBundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_CreateJoinToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).CreateJoinToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/CreateJoinToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).CreateJoinToken(ctx, req.(*JoinToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_FetchBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).FetchBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/FetchBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).FetchBundle(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_EvictAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvictAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).EvictAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/EvictAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).EvictAgent(ctx, req.(*EvictAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_ListAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAgentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).ListAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/ListAgents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).ListAgents(ctx, req.(*ListAgentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_MintX509SVID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MintX509SVIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).MintX509SVID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/MintX509SVID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).MintX509SVID(ctx, req.(*MintX509SVIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_MintJWTSVID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MintJWTSVIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).MintJWTSVID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/MintJWTSVID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).MintJWTSVID(ctx, req.(*MintJWTSVIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_GetNodeSelectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeSelectorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).GetNodeSelectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/GetNodeSelectors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).GetNodeSelectors(ctx, req.(*GetNodeSelectorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Registration_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spire.api.registration.Registration",
	HandlerType: (*RegistrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEntry",
			Handler:    _Registration_CreateEntry_Handler,
		},
		{
			MethodName: "CreateEntryIfNotExists",
			Handler:    _Registration_CreateEntryIfNotExists_Handler,
		},
		{
			MethodName: "DeleteEntry",
			Handler:    _Registration_DeleteEntry_Handler,
		},
		{
			MethodName: "FetchEntry",
			Handler:    _Registration_FetchEntry_Handler,
		},
		{
			MethodName: "FetchEntries",
			Handler:    _Registration_FetchEntries_Handler,
		},
		{
			MethodName: "UpdateEntry",
			Handler:    _Registration_UpdateEntry_Handler,
		},
		{
			MethodName: "ListByParentID",
			Handler:    _Registration_ListByParentID_Handler,
		},
		{
			MethodName: "ListBySelector",
			Handler:    _Registration_ListBySelector_Handler,
		},
		{
			MethodName: "ListBySelectors",
			Handler:    _Registration_ListBySelectors_Handler,
		},
		{
			MethodName: "ListBySpiffeID",
			Handler:    _Registration_ListBySpiffeID_Handler,
		},
		{
			MethodName: "ListAllEntriesWithPages",
			Handler:    _Registration_ListAllEntriesWithPages_Handler,
		},
		{
			MethodName: "CreateFederatedBundle",
			Handler:    _Registration_CreateFederatedBundle_Handler,
		},
		{
			MethodName: "FetchFederatedBundle",
			Handler:    _Registration_FetchFederatedBundle_Handler,
		},
		{
			MethodName: "UpdateFederatedBundle",
			Handler:    _Registration_UpdateFederatedBundle_Handler,
		},
		{
			MethodName: "DeleteFederatedBundle",
			Handler:    _Registration_DeleteFederatedBundle_Handler,
		},
		{
			MethodName: "CreateJoinToken",
			Handler:    _Registration_CreateJoinToken_Handler,
		},
		{
			MethodName: "FetchBundle",
			Handler:    _Registration_FetchBundle_Handler,
		},
		{
			MethodName: "EvictAgent",
			Handler:    _Registration_EvictAgent_Handler,
		},
		{
			MethodName: "ListAgents",
			Handler:    _Registration_ListAgents_Handler,
		},
		{
			MethodName: "MintX509SVID",
			Handler:    _Registration_MintX509SVID_Handler,
		},
		{
			MethodName: "MintJWTSVID",
			Handler:    _Registration_MintJWTSVID_Handler,
		},
		{
			MethodName: "GetNodeSelectors",
			Handler:    _Registration_GetNodeSelectors_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListFederatedBundles",
			Handler:       _Registration_ListFederatedBundles_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "registration.proto",
}
